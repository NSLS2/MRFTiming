record(stringin, "$(P)$(R):TimeOfDay") {
  field(DESC, "Time of Day")
  field(SCAN,  "1 second")
  field(DTYP,  "Soft Timestamp")
  field(INP, "@%b %d, %Y  %H:%M:%S")
}

record(stringin, "$(P)$(R):HeartBeat_") {
  field(DESC, "Heart Beat Input")
  field(SCAN,  "1 second")
  field(DTYP,  "Soft Timestamp")
  field(INP, "@%S")
}

record(calc, "$(P)$(R):HeartBeat") {
  field(DESC, "$(P)$(R) IOC Heart Beat")
  field(SCAN, "1 second")
  field(INPA, "$(P)$(R):HeartBeat_ CP")
  field(CALC, "A%2=0?1:0")
}


record(waveform, "$(P)$(R)PulseGen$(N):TITLE") {
  field(DESC, "Pulse gen. $(N) Output Desc.")
  field(FTVL, "STRING")
  field(NELM, "200")
  field(PINI, "YES")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(P)$(R)PulseGen$(N):USAGE") {
  field(DESC, "Pulse gen. $(N) Usage")
  field(FTVL, "STRING")
  field(NELM, "200")
  field(PINI, "YES")
  info(autosaveFields_pass1, "VAL")
}

record(longout, "$(P)$(R)PulseGen$(N):CODE") {
  field(DESC, "Pulse gen. $(N) Event Code")
  field(SCAN, "1 second")
  field(PINI, "YES")
  info(autosaveFields_pass0, "VAL")
}

record(waveform, "$(P)$(R)PulseGen$(N):RATE") {
  field(DESC, "Pulse gen. $(N) Event Rate")
  field(FTVL, "STRING")
  field(NELM, "200")
  field(PINI, "YES")
  info(autosaveFields_pass1, "VAL")
}


# User-facing PV (microseconds)
record(ao, "$(P)$(R)PG$(N):Delay-us")
{
    field(DESC, "PulseGen $(N) delay (µs)")
    field(EGU,  "us")
    field(PREC, "3")
    field(PINI, "YES")
    info(autosaveFields_pass0, "VAL")
}

# µs → cycles conversion (user wrote Delay_us)
record(calcout, "$(P)$(R)PG$(N):Delay-us:CY")
{
    field(DESC, "µs → cycles")
    field(INPA, "$(P)$(R)PG$(N):Delay-us CP")
    field(CALC, "A*124.9")
    field(OUT,  "$(P)$(R)PulseGen$(N):Delay PP")
}

# cycles → µs conversion (user wrote Delay)
record(calcout, "$(P)$(R)PG$(N):Delay-us:US")
{
    field(DESC, "cycles → µs")
    field(INPA, "$(P)$(R)PulseGen$(N):Delay CP")
    field(CALC, "A/124.9")
    field(OUT,  "$(P)$(R)PG$(N):Delay-us PP")
}


# User-facing PV (microseconds)
record(ao, "$(P)$(R)PG$(N):Width-us")
{
    field(DESC, "PulseGen $(N) width (µs)")
    field(EGU,  "us")
    field(DRVL, "0")
    field(DRVH, "1000")
    field(PREC, "3")
    field(PINI, "YES")
    info(autosaveFields_pass0, "VAL")
}

# µs → cycles conversion
record(calcout, "$(P)$(R)PG$(N):Width-us:CY")
{
    field(DESC, "µs → cycles")
    field(INPA, "$(P)$(R)PG$(N):Width-us CP")
    field(CALC, "A*124.9")
    field(OUT,  "$(P)$(R)PulseGen$(N):Width PP")
}

# cycles → µs conversion
record(calcout, "$(P)$(R)PG$(N):Width-us:US")
{
    field(DESC, "cycles → µs")
    field(INPA, "$(P)$(R)PulseGen$(N):Width CP")
    field(CALC, "A/124.9")
    field(OUT,  "$(P)$(R)PG$(N):Width-us PP")
}


# Network information
record(stringin, "$(P)$(R)EVR:MAC-Address") {
  field(DESC, "MAC Address for MRF Device")
  field(PINI, "YES")
  info(autosaveFields_pass0, "VAL")
}

record(bo, "$(P)$(R)Default-Cmd")
{
    field(DESC, "Default settings")
    field(PINI,"YES")
    field(DTYP, "Launcher")
    field(ZNAM, "Idle")
    field(ONAM, "Set")
    field(OUT,  "@python3 /epics/modules/MRFTiming/python/default.py")
}
